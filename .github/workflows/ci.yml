---
name: CI
'on':
  pull_request:
  push:
    branches:
      - main
    tags:
      - '*'
  schedule:
    - cron: "0 5 * * 0"

defaults:
  run:
    working-directory: 'mtulio.okd_installer'

jobs:

  lint:
    name: Linters
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3
        with:
          path: 'mtulio.okd_installer'
          submodules: recursive

      - name: Set up Python 3.
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install test dependencies.
        run: pip3 install yamllint ansible-lint

      - name: YAML-lint
        run: |
          yamllint .

      - name: Ansible-lint
        run: |
          ansible-lint ./

  molecule:
    name: Molecule
    runs-on: ubuntu-latest
    needs: [lint]
    strategy:
      matrix:
        include:
          - distro: centos7
            playbook: converge.yml
          - distro: debian10
            playbook: converge.yml

    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3
        with:
          path: 'mtulio.okd_installer'
          submodules: recursive

      - name: Set up Python 3.
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install test dependencies.
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt

      - name: Run Molecule tests.
        run: molecule test
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          MOLECULE_DISTRO: ${{ matrix.distro }}
          MOLECULE_PLAYBOOK: ${{ matrix.playbook }}

  build:
    name: Builder
    runs-on: ubuntu-latest
    needs: [molecule]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: 'mtulio.okd_installer'
          fetch-depth: 5
          submodules: recursive

      - name: Build Collection
        env:
          VERSION: "0.0.0-ci.${{ github.run_number }}-${{ github.run_id }}"
        run: |
          echo "> Building VERSION=[$VERSION]"
          ansible-playbook hack/ci/deploy.yml \
            -e tag="$VERSION" \
            -t build

          echo "> Listing built artifacts: "
          ls build/mtulio-okd_installer-*.tar.gz

          echo "> Renaming to 'latest': "
          mv -v build/mtulio-okd_installer-$VERSION.tar.gz \
             /tmp/mtulio-okd_installer-latest.tar.gz

      - name: Save artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mtulio-okd_installer-builds
          path: /tmp/mtulio-okd_installer-latest.tar.gz

  publish-container-latest:
    name: Releaser Container(latest)
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: 'mtulio.okd_installer'
          fetch-depth: 5
          submodules: recursive

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: mtulio-okd_installer-builds
          path: /tmp/build/

      - name: Build container image
        env:
          VERSION: latest
          VERSION_BUILD: "0.0.0-ci.${{ github.run_number }}-${{ github.run_id }}"
          IMAGE: quay.io/mrbraga/okd-installer
          QUAY_USER: ${{ secrets.QUAY_USER }}
          QUAY_PASS: ${{ secrets.QUAY_PASS }}
        run: |
          echo "> Check build artifacts dir /tmp/build:"
          ls -l /tmp/build

          echo "> Moving artifacts to local:"
          mkdir ./build || true
          mv -v /tmp/build/*.tar.gz ./build

          echo "> Logging to Quay.io:"
          podman login -u="${QUAY_USER}" -p="${QUAY_PASS}" quay.io

          echo "> Build container image:"
          podman build -t ${IMAGE}:${VERSION} -f hack/Containerfile .
          podman tag ${IMAGE}:${VERSION} ${IMAGE}:${VERSION_BUILD}

          echo "> Publish container image:"
          podman push ${IMAGE}:${VERSION}
          podman push ${IMAGE}:${VERSION_BUILD}

  release-to-galaxy:
    name: Releaser Collection(Galaxy)
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: 'mtulio.okd_installer'
          fetch-depth: 5
          submodules: recursive

      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Deploy to Galaxy
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
          BUILD_FILE: mtulio-okd_installer-${{ steps.get_version.outputs.VERSION }}.tar.gz
          ANSIBLE_GALAXY_TOKEN: ${{ secrets.ANSIBLE_GALAXY_TOKEN }}
        run: |
          echo VERSION=[$VERSION]
          ansible-playbook hack/ci/deploy.yml \
            -e tag="${VERSION}" \
            -t build,deploy

          mv -v build/${BUILD_FILE} /tmp/${BUILD_FILE}

      - name: Save artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mtulio-okd_installer-build-${{ steps.get_version.outputs.VERSION }}
          path: /tmp/mtulio-okd_installer-${{ steps.get_version.outputs.VERSION }}.tar.gz

  publish-container-release:
    name: Releaser Container(tag)
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [release-to-galaxy]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: 'mtulio.okd_installer'
          fetch-depth: 5
          submodules: recursive

      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: mtulio-okd_installer-build-${{ steps.get_version.outputs.VERSION }}
          path: /tmp/build/

      - name: Build container image
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
          IMAGE: quay.io/mrbraga/okd-installer
          QUAY_USER: ${{ secrets.QUAY_USER }}
          QUAY_PASS: ${{ secrets.QUAY_PASS }}
        run: |
          echo "> Check build artifacts dir /tmp/build:"
          ls -l /tmp/build

          echo "> Moving artifacts to local:"
          mkdir ./build || true
          mv -v /tmp/build/*.tar.gz ./build

          echo "> Logging to Quay.io:"
          podman login -u="${QUAY_USER}" -p="${QUAY_PASS}" quay.io

          echo "> Build container image:"
          podman build -t ${IMAGE}:${VERSION} -f hack/Containerfile .

          echo "> Publish container image:"
          podman push ${IMAGE}:${VERSION}
