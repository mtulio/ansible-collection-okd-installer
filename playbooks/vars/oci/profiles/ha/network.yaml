################################
# AWS Networks
# AWS us-east-1: 10.0.0.0/16 (to 10.0.255.255/16)
# AWS <unassigned>: 10.23.0.0/16 (to 10.23.255.255/19)

#########################

# TODO: fix those rules to more restrictive. This is used to dev env.
# security_groups: []

cloud_networks:
  ## OCI US San Jose 1 (HA topology)
  - name: "{{ cluster_state.infra_id }}-vcn"
    block: "{{ okd_net_default_cidr }}"
    provider: oci
    region: "{{ config_cluster_region }}"
    compartment_id: "{{ oci_compartment_id }}"

    security_groups: "{{ security_groups | d([]) }}"
    tags: "{{ cluster_state.tags | d({}) }}"

    spec_vcn:
      dns_label: ocp

    internet_gateway:
      spec:
        is_enabled: yes
        display_name: "{{ cluster_state.infra_id }}-igw"

    nat_gateway:
      spec:
        display_name: "{{ cluster_state.infra_id }}-natgw"
      # route_table_name: "{{ cluster_state.infra_id }}-rt-private"
          
        # tags: "{{ cluster_state.tags | d({}) }}"
        # wait: false
    #   - name: "{{ cluster_state.infra_id }}-natgw-1b"
    #     subnet: "{{ cluster_state.infra_id }}-net-public-1b"
    #     tags: "{{ cluster_state.tags | d({}) }}"
    #     wait: false
    #   - name: "{{ cluster_state.infra_id }}-natgw-1c"
    #     subnet: "{{ cluster_state.infra_id }}-net-public-1c"
    #     tags: "{{ cluster_state.tags | d({}) }}"
    #     wait: true

    #> TODO use generic list
    route_table_public:
      spec:
        display_name: "{{ cluster_state.infra_id }}-rt-public"
      route_rules:
      - spec:
          destination: "0.0.0.0/0"
          destination_type: "CIDR_BLOCK"
        network_entity_type: internet-gateway
        network_entity_name: "{{ cluster_state.infra_id }}-igw"

    route_table_private:
      spec:
        display_name: "{{ cluster_state.infra_id }}-rt-private"
      route_rules:
      - spec:
          destination: "0.0.0.0/0"
          destination_type: "CIDR_BLOCK"
        network_entity_type: nat-gateway
        network_entity_name: "{{ cluster_state.infra_id }}-natgw"

    # # Generic list
    # route_tables:
    #   - public: yes
    #     spec:
    #       display_name: "{{ cluster_state.infra_id }}-rt-public"
    #     route_rules:
    #     - spec:
    #         destination: "0.0.0.0/0"
    #         destination_type: "CIDR_BLOCK"
    #       network_entity_type: internet-gateway
    #       network_entity_name: "{{ cluster_state.infra_id }}-igw"

    #   - public: no
    #     spec:
    #       display_name: "{{ cluster_state.infra_id }}-rt-private"
    #     route_rules:
    #     - spec:
    #         destination: "0.0.0.0/0"
    #         destination_type: "CIDR_BLOCK"
    #       network_entity_type: nat-gateway
    #       network_entity_name: "{{ cluster_state.infra_id }}-natgw"

    # create permissive security Lists to force to use NSGs
    # https://docs.oracle.com/en-us/iaas/tools/oci-ansible-collection/4.12.0/collections/oracle/oci/oci_network_security_list_module.html#ansible-collections-oracle-oci-oci-network-security-list-module
    security_lists:
    - spec:
        display_name: "{{ cluster_state.infra_id }}-seclist-public"
        ingress_security_rules: []
        # - protocol: all
        #   source: 0.0.0.0/0
        #   is_stateless: false
        #   source_type: CIDR_BLOCK
        #   description: Allow all inbound
        egress_security_rules:
        - destination: 0.0.0.0/0
          protocol: all
          destination_type: CIDR_BLOCK
          is_stateless: false
          description: Allow All Outbound

    - spec:
        display_name: "{{ cluster_state.infra_id }}-seclist-private"
        # TODO restrict only for I/O of listeners/backendSet
        ingress_security_rules: []
        # - protocol: all
        #   source: 0.0.0.0/0
        #   is_stateless: false
        #   source_type: CIDR_BLOCK
        #   description: Allow all inbound
        egress_security_rules:
        - destination: 0.0.0.0/0
          protocol: all
          destination_type: CIDR_BLOCK
          is_stateless: false
          description: Allow All Outbound
        # - destination: "10.0.0.0/16"
        #   protocol: 6
        #   tcp_options:
        #     destination_port_range:
        #       min: 6443
        #       max: 6443
        #   destination_type: CIDR_BLOCK
        #   is_stateless: false
        #   description: Allow API Outbound
        # - destination: "10.0.0.0/16"
        #   protocol: 6
        #   tcp_options:
        #     destination_port_range:
        #       min: 22623
        #       max: 22623
        #   destination_type: CIDR_BLOCK
        #   is_stateless: false
        #   description: Allow MCS Outbound

    subnets:
    # Best practice create dedicated LB Subnet/Rtb? 
    # https://docs.oracle.com/en-us/iaas/Content/GSG/Tasks/loadbalancing.htm#Update
    # Your load balancer must reside in different subnets from your application instances. This configuration allows you to keep your application instances secured in subnets with stricter access rules, while allowing public internet traffic to the load balancer in the public subnets.

      # - public: no
      #   spec:
      #     display_name: "{{ cluster_state.infra_id }}-net-private"
      #     cidr_block: "10.0.0.0/22"
      #     prohibit_public_ip_on_vnic: true

      - spec:
          display_name: "{{ cluster_state.infra_id }}-net-public"
          cidr_block: "10.0.0.0/20"
          dns_label: pub
          prohibit_internet_ingress: false
        public: true
        route_table_name: "{{ cluster_state.infra_id }}-rt-public"
        security_list_names:
          - "{{ cluster_state.infra_id }}-seclist-public"

      - spec:
          display_name: "{{ cluster_state.infra_id }}-net-private"
          cidr_block: "10.0.16.0/20"
          dns_label: priv
          prohibit_internet_ingress: true
        public: false
        route_table_name: "{{ cluster_state.infra_id }}-rt-private"
        security_list_names:
          - "{{ cluster_state.infra_id }}-seclist-private"


      # - public: no
      #   security_list_names:
      #     - "{{ cluster_state.infra_id }}-seclist-default"
      #   spec:
      #     cidr_block: "10.0.32.0/22"
      #     display_name: "{{ cluster_state.infra_id }}-net-private-nodes"
      #     prohibit_internet_ingress: true
      #     prohibit_public_ip_on_vnic: true
      #     dns_label: nodes

      # - public: yes
      #   route_table_name: "{{ cluster_state.infra_id }}-rt-public-lb"
      #   security_list_names:
      #     - "{{ cluster_state.infra_id }}-seclist-lb"
      #   spec:
      #     cidr_block: "10.0.0.0/24"
      #     display_name: "{{ cluster_state.infra_id }}-net-public-lb"


    # https://docs.oracle.com/en-us/iaas/tools/oci-ansible-collection/4.12.0/collections/oracle/oci/oci_network_security_list_module.html#ansible-collections-oracle-oci-oci-network-security-list-module
    network_security_groups:
    - spec:
        display_name: "{{ cluster_state.infra_id }}-nsg-controlplane"
      rules:
        spec:
          security_rules:
          # INGRESS
          - description: allow all inbound subnet
            source: "10.0.0.0/16"
            source_type: "CIDR_BLOCK"
            direction: INGRESS
            is_stateless: false
            protocol: all

          - description: allow ssh
            source: "0.0.0.0/0"
            source_type: "CIDR_BLOCK"
            direction: INGRESS
            is_stateless: false
            protocol: 6
            tcp_options:
              destination_port_range:
                min: 22
                max: 22

          - description: allow API
            source: "0.0.0.0/0"
            source_type: "CIDR_BLOCK"
            direction: INGRESS
            is_stateless: false
            protocol: 6
            tcp_options:
              destination_port_range:
                min: 6443
                max: 6443

          # EGRESS
          - description: allow all outbound subnet
            destination: "0.0.0.0/0"
            destination_type: "CIDR_BLOCK"
            direction: EGRESS
            is_stateless: false
            protocol: all

    - spec:
        display_name: "{{ cluster_state.infra_id }}-nsg-compute"
      rules:
        spec:
          security_rules:
          # INGRESS
          - description: allow all inbound subnet
            source: "10.0.0.0/16"
            source_type: "CIDR_BLOCK"
            direction: INGRESS
            is_stateless: false
            protocol: all

          - description: allow ssh
            source: "0.0.0.0/0"
            source_type: "CIDR_BLOCK"
            direction: INGRESS
            is_stateless: false
            protocol: 6
            tcp_options:
              destination_port_range:
                min: 22
                max: 22

          # EGRESS
          - description: allow all outbound subnet
            destination: "0.0.0.0/0"
            destination_type: "CIDR_BLOCK"
            direction: EGRESS
            is_stateless: false
            protocol: all

    - spec:
        display_name: "{{ cluster_state.infra_id }}-nsg-nlb"
      rules:
        spec:
          security_rules:
          # INGRESS
          - description: allow all inbound subnet
            source: "10.0.0.0/16"
            source_type: "CIDR_BLOCK"
            direction: INGRESS
            is_stateless: false
            protocol: all

          - description: allow KAPI
            source: "0.0.0.0/0"
            source_type: "CIDR_BLOCK"
            direction: INGRESS
            is_stateless: false
            protocol: 6
            tcp_options:
              destination_port_range:
                min: 6443
                max: 6443

          - description: allow MCS
            source: "0.0.0.0/0"
            source_type: "CIDR_BLOCK"
            direction: INGRESS
            is_stateless: false
            protocol: 6
            tcp_options:
              destination_port_range:
                min: 22623
                max: 22623

          - description: allow IG-HTTP
            source: "0.0.0.0/0"
            source_type: "CIDR_BLOCK"
            direction: INGRESS
            is_stateless: false
            protocol: 6
            tcp_options:
              destination_port_range:
                min: 80
                max: 80

          - description: allow IG-HTTPS
            source: "0.0.0.0/0"
            source_type: "CIDR_BLOCK"
            direction: INGRESS
            is_stateless: false
            protocol: 6
            tcp_options:
              destination_port_range:
                min: 443
                max: 443

          # EGRESS
          - description: allow all outbound subnet
            destination: "0.0.0.0/0"
            destination_type: "CIDR_BLOCK"
            direction: EGRESS
            is_stateless: false
            protocol: all
