---
- name: Create workdir
  ansible.builtin.file:
    state: directory
    path: "{{ item }}"
    mode: 0755
  with_items:
    - "{{ collection_tmp_dir }}"
    - "{{ collection_bin_dir }}"

# - name: Create default_version var
#   ansible.builtin.set_fact:
#     _default_version: "{{ release_image }}:{{ version | d(default_version) }}-{{ release_arch }}"

- name: Mount the binary names 
  ansible.builtin.set_fact:
    bin_clients: "openshift-client-{{ client_os }}-{{ version | d(release_version) }}"
    _bin_installer: "openshift-install-{{ client_os }}-{{ version | d(release_version) }}"
    _bin_oc: "oc-{{ client_os }}-{{ version | d(release_version) }}"
    _bin_kubectl: "kubectl-{{ client_os }}-{{ version | d(release_version) }}"
    _bin_butane: "{{ cli_butane_bin }}-{{ cli_butane_version }}"
    _bin_filetranspile: "{{ cli_filetranspile_bin }}"

# Client: openshift-install

- name: openshift-install | Check is present
  ansible.builtin.stat:
    path: "{{ collection_bin_dir }}/{{ _bin_installer }}"
  register: check_bin_inst

- name: openshift-install | Install client
  when: not(check_bin_inst.stat.exists)
  block:
  - name: openshift-install | Check tarball
    ansible.builtin.stat:
      path: "{{ collection_tmp_dir }}/{{ _bin_installer }}.tar.gz"
    register: check_tar_inst

  - name: openshift-install | Download msg
    ansible.builtin.debug:
      msg: "Downloading tools [{{ release_image_version_arch | d(local_version) }}] using secret [{{ config_pull_secret_file }}]"
    when: not(check_tar_inst.stat.exists)

  - name: openshift-install | Check vars
    ansible.builtin.assert:
      that:
        - config_pull_secret_file is defined
        - config_pull_secret_file|length > 0
      fail_msg: "'config_pull_secret_file' is not defined. Check the env var CONFIG_PULL_SECRET_FILE"
    when:
     - not(check_tar_inst.stat.exists) or (skip_checks | d('no') == 'no')

  - name: openshift-install | Extract release
    ansible.builtin.shell: |
      oc adm release extract -a {{ config_pull_secret_file }} \
        --tools {{ release_image_version_arch | d(local_version) }}
    when:
      - not(check_tar_inst.stat.exists)
      - config_pull_secret_file | d("") != ""
    args:
      chdir: "{{ collection_tmp_dir }}"

  - name: openshift-install | Extract release
    ansible.builtin.shell: |
      oc adm release extract \
        --tools {{ release_image_version_arch | d(local_version) }}
    when:
      - not(check_tar_inst.stat.exists)
      - config_pull_secret_file|d("") == ""
    args:
      chdir: "{{ collection_tmp_dir }}"

  - name: openshift-install | Extract tarball
    ansible.builtin.unarchive:
      src: "{{ collection_tmp_dir }}/{{ _bin_installer }}.tar.gz"
      dest: "{{ collection_tmp_dir }}"
    when: not(check_bin_inst.stat.exists)
    register: ext_bin_inst

  - name: openshift-install | Copy to bin dir
    ansible.builtin.copy:
      src: "{{ collection_tmp_dir }}/openshift-install"
      dest: "{{ collection_bin_dir }}/{{ _bin_installer }}"
      mode: 0755
    when: ext_bin_inst.changed

  - name: openshift-install | Remove tmp file
    ansible.builtin.file:
      state: absent
      path: "{{ collection_tmp_dir }}/openshift-install"
    when: ext_bin_inst.changed

# Client: oc

- name: oc | Check openshift client is present
  ansible.builtin.stat:
    path: "{{ collection_bin_dir }}/{{ _bin_oc }}"
  register: check_bin_cli

- name: oc | Install clients
  when: not(check_bin_cli.stat.exists)
  block:
  - name: oc | Extract from tarball
    ansible.builtin.unarchive:
      src: "{{ collection_tmp_dir }}/{{ bin_clients }}.tar.gz"
      dest: "{{ collection_tmp_dir }}"
    when: not(check_bin_cli.stat.exists)
    register: ext_bin_cli

  - name: oc | Copy to bin path
    ansible.builtin.copy:
      src: "{{ collection_tmp_dir }}/oc"
      dest: "{{ collection_bin_dir }}/{{ _bin_oc }}"
      mode: 0755
    when: ext_bin_cli.changed

  - name: oc | Remove tmp file
    ansible.builtin.file:
      state: absent
      path: "{{ collection_tmp_dir }}/oc"
    when: ext_bin_cli.changed

  - name: kubectl | Copy to bin path
    ansible.builtin.copy:
      src: "{{ collection_tmp_dir }}/kubectl"
      dest: "{{ collection_bin_dir }}/{{ _bin_kubectl }}"
      mode: 0755
    when: ext_bin_cli.changed

  - name: kubectl | Remove tmp file
    ansible.builtin.file:
      state: absent
      path: "{{ collection_tmp_dir }}/kubectl"
    when: ext_bin_cli.changed

# Client: butane

- name: butane | Check butane client is present
  ansible.builtin.stat:
    path: "{{ collection_bin_dir }}/{{ _bin_butane }}"
  register: check_bin_butane

- name: butane | Install clients
  when: not(check_bin_butane.stat.exists)
  block:
  - name: butane | Extract from tarball
    ansible.builtin.get_url:
      url: "{{ cli_butane_url }}"
      dest: "{{ collection_tmp_dir }}/butane"
      mode: '0440'
    register: ext_bin_butane

  - name: butane | Copy to bin path
    ansible.builtin.copy:
      src: "{{ collection_tmp_dir }}/butane"
      dest: "{{ collection_bin_dir }}/{{ _bin_butane }}"
      mode: 0755
    when: ext_bin_butane.changed

  - name: butane | Remove tmp file
    ansible.builtin.file:
      state: absent
      path: "{{ collection_tmp_dir }}/butane"
    when: ext_bin_butane.changed

# Client: FileTranspile

- name: filetranspile | Check filetranspile client is present
  ansible.builtin.stat:
    path: "{{ collection_bin_dir }}/{{ _bin_filetranspile }}"
  register: check_bin_filetranspile

- name: filetranspile | Install clients
  when: not(check_bin_filetranspile.stat.exists)
  block:
  - name: filetranspile | Download
    ansible.builtin.get_url:
      url: "{{ cli_filetranspile_url }}"
      dest: "{{ collection_tmp_dir }}/filetranspile"
      mode: '0440'
    register: ext_bin_filetranspile

  - name: filetranspile | Copy to bin path
    ansible.builtin.copy:
      src: "{{ collection_tmp_dir }}/filetranspile"
      dest: "{{ collection_bin_dir }}/{{ _bin_filetranspile }}"
      mode: 0755
    when: ext_bin_filetranspile.changed

  - name: filetranspile | Remove tmp file
    ansible.builtin.file:
      state: absent
      path: "{{ collection_tmp_dir }}/filetranspile"
    when: ext_bin_filetranspile.changed

# Creating links to binaries

## Create symlinks for cluster to prevent using wrong versions
- name: Create binary suffix by cluster name
  ansible.builtin.set_fact:
    _clients_suffix: "{{ cluster_name | d('') }}"

- name: Map clients version to cluster name
  ansible.builtin.set_fact:
    _clients_map:
      - src: "{{ _bin_installer }}"
        link: "openshift-install-{{ _clients_suffix }}"
      - src: "{{ _bin_oc }}"
        link: "oc-{{ _clients_suffix }}"
      - src: "{{ _bin_kubectl }}"
        link: "kubectl-{{ _clients_suffix }}"
      - src: "{{ _bin_butane }}"
        link: "butane-{{ _clients_suffix }}"
      - src: "{{ _bin_filetranspile }}"
        link: "filetranspile-{{ _clients_suffix }}"

- name: Ensure file links are present
  ansible.builtin.file:
    state: link
    src: "{{ collection_bin_dir }}/{{ item.src }}"
    dest: "{{ collection_bin_dir }}/{{ item.link }}"
  with_items: "{{ _clients_map }}"

- name: Show clients path
  ansible.builtin.debug:
    msg:
      - "binary=[{{ collection_bin_dir }}/{{ item.src }}]"
      - "link=[{{ collection_bin_dir }}/{{ item.link }}]"
  with_items: "{{ _clients_map }}"