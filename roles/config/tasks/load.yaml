---

- name: Load | Check required vars - provider
  ansible.builtin.assert:
    that:
      - provider is in config_valid_providers
    fail_msg: "'provider' is not a valid provider {{ config_valid_providers }}"

- name: Load | Assert directories
  ansible.builtin.stat:
    path: "{{ config_install_dir }}"
  register: st_dir

- name: Load | Check installer dir
  ansible.builtin.assert:
    that:
      - st_dir.stat.exists
      - st_dir.stat.isdir
    fail_msg: "installer dir [{{ config_install_dir }}] is not present. Create config first."

- name: Load | Set bootstrap ignition filename for HA
  ansible.builtin.set_fact:
    _filename_bootstrap_ign: "bootstrap.ign"

- name: Load | Variables from ignition files
  ansible.builtin.set_fact:
    _installer_state: "{{ lookup('file', config_install_dir + '/.openshift_install_state.json') }}"
    _installer_metadata: "{{ lookup('file', config_install_dir + '/metadata.json') }}"
    _ignition_bootstrap: "{{ lookup('file', config_install_dir + '/' + _filename_bootstrap_ign) }}"
    installer_coreos_stream: "{{ lookup('file', config_install_dir + '/coreos-stream.json') }}"
  no_log: true

- name: Load | Set defaults short vars
  ansible.builtin.set_fact:
    base_domain: "{{ _installer_state[\"*installconfig.InstallConfig\"][\"config\"][\"baseDomain\"] }}"
    tags: {}
    image_id_ign: "{{ _installer_state[\"*rhcos.Image\"] | d('') }}"
    _region: "{{ config_cluster_region | d(lookup('env', 'CONFIG_REGION')) }}"
    _provider: "{{ provider | d('NA') }}"
    _arch: "{{ arch | d('x86_64') }}"

- name: Load | Lookup ImageID
  block:
  - name: Load | Lookup ImageID | Check image
    ansible.builtin.set_fact:
      image_id_stream: "{{ installer_coreos_stream.architectures[_arch].images[_provider].regions[_region].image }}"
    when:
      - _provider != 'NA'
  when:
    - custom_image_id | d('') == ''
    - image_id_ign == ''

- name: Load | Check if cluster_state file
  ansible.builtin.stat:
    path: "{{ config_install_dir + '/cluster_state.json' }}"
  register: st_out

- name: Load | Set local cluster_state
  ansible.builtin.set_fact:
    cluster_state: "{{ lookup('file', config_install_dir + '/cluster_state.json', errors='ignore') }}"
  when: st_out.stat.exists

- name: Load | Create initial cluster_state
  ansible.builtin.set_fact:
    cluster_state:
      cluster_name: "{{ _installer_metadata.clusterName }}"
      cluster_id: "{{ _installer_metadata.clusterID }}"
      infra_id: "{{ _installer_metadata.infraID }}"
      tags: "{% set x = tags.__setitem__('kubernetes.io/cluster/' + _installer_metadata.infraID, 'owned') %}{{ tags }}"
      region: "{{ _region }}"
      platform:
        provider: "{{ _provider }}"
        platform: "{{ config_platform | d('none') }}"
      dns:
        base_domain: "{{ base_domain }}"
        base_domain_id: ''
        cluster_domain: "{{ _installer_metadata.clusterName }}.{{ base_domain }}"
        cluster_domain_id: ''
        registers: []
      network:
        vpc_id: ''
        subnets: []
      loadbalancers: {}
      compute:
        image_id: "{{ custom_image_id | d(image_id_stream) | d(image_id_ign) }}"
        iam_profile_bootstrap: "{{ _installer_metadata.infraID }}-instance-bootstrap"
        iam_profile_compute: "{{ _installer_metadata.infraID }}-instance-compute"
        iam_profile_controlplane: "{{ _installer_metadata.infraID }}-instance-controlPlane"
      certificates:
        root_ca: "{{ _ignition_bootstrap | json_query(query_root_ca) | join('') }}"
      iam:
        profile_bootstrap: "{{ _installer_metadata.infraID }}-instance-bootstrap"
        profile_controlplane: "{{ _installer_metadata.infraID }}-instance-controlplane"
        profile_compute: "{{ _installer_metadata.infraID }}-instance-compute"
  vars:
    query_root_ca: "storage.files[?path=='/opt/openshift/tls/root-ca.crt'].contents.source"
  when: not(st_out.stat.exists)

- name: Load | Save state
  ansible.builtin.include_tasks: save-state.yaml
